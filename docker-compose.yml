version: "3.9"

services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOO_LOG4J_PROP: "ERROR,CONSOLE"

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG4J_OPTS: "-Dlog4j.configuration=file:/kafka/config/log4j.properties"
    volumes:
      - ./config/log4j.properties:/kafka/config/log4j.properties
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 5s
      retries: 10


  sniffer:
    build:
      context: .
      dockerfile: docker/Dockerfile.sniffer
    depends_on:
      - kafka
    cap_add:
      - NET_ADMIN  # Needed for packet sniffing

  processor:
    build:
      context: .
      dockerfile: docker/Dockerfile.processor
    depends_on:
      - kafka

  ml:
    build:
      context: .
      dockerfile: docker/Dockerfile.ml
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]
    volumes:
      - ./ml_service:/app
    depends_on:
      - kafka

  responder:
    build:
      context: .
      dockerfile: docker/Dockerfile.responder
    volumes:
      - ./responder/config:/app/config
    depends_on:
      - kafka
    cap_add:
      - NET_ADMIN

  zeek_ingestor:
    build:
      context: .
      dockerfile: docker/Dockerfile.zeek
    volumes:
      - ./zeek_ingestor/zeek_logs:/app/zeek_logs
    depends_on:
      - kafka

  train:
    build:
      context: .
      dockerfile: docker/Dockerfile.train
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]
    volumes:
      - ./ml_model:/app
      - ./ml_service:/ml_service
    profiles: ["manual"]